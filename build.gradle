/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'com.github.spotbugs' version '4.7.1' apply false
}

allprojects {
    group = 'com.nativelibs4java'
    version = '0.13-SNAPSHOT'
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
        }

        dependencies {
            classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.1"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    apply plugin: 'antlr'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    logger.info("Loading project $it")

    apply from: "${rootProject.projectDir}/gradle/spotbugs.gradle"

    dependencies {
        spotbugsPlugins 'com.mebigfatguy.sb-contrib:sb-contrib:7.4.7'
        spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'

        antlr 'org.antlr:antlr:3.4'

        testImplementation 'junit:junit:4.12'
    }

    sourceCompatibility = '1.8'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    apply from: "${rootProject.projectDir}/gradle/eclipse-util.gradle"

    eclipse {
        project {
            if (project.name in spotBugsEclipseProjects) {
                logger.info("Adding SpotBugs to ${project.name}")

                natures 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
                buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
            }
        }

        classpath.downloadJavadoc = true
        classpath.downloadSources = true

        classpath.file.whenMerged { cp ->
            logger.debug("Filtering source folders for ${project.name}")
            cp.entries.removeAll { filterCpEntry(it) }

            logger.debug("Setting up source folders for ${project.name}")
            cp.entries.each { setUpSourceFolder(it) }
        }
    }
}
